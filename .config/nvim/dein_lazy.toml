# defx
[[plugins]]
repo ='kristijanhusak/defx-icons'
on_source = ['defx.nvim']

[[plugins]]
repo ='kristijanhusak/defx-git'
on_source = ['defx.nvim']
hook_post_source= '''
    let g:defx_git#indicators = {
        \ 'Modified'  : '+',
        \ 'Staged'    : '●',
        \ 'Untracked' : '?',
        \ 'Renamed'   : '➜',
        \ 'Unmerged'  : '═',
        \ 'Deleted'   : 'x',
        \ 'Unknown'   : '?'
        \ }
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_post_source = '''
    function! Root(path) abort
        return fnamemodify(a:path, ':t')
    endfunction

    call defx#custom#source('file', {
            \ 'root': 'Root',
            \})

    call defx#custom#column('filename', {
            \ 'directory_icon': '',
            \ 'opened_icon': '',
            \ })

    call defx#custom#column('mark', {
            \ 'readonly_icon': '✗',
            \ 'selected_icon': '✓',
            \ })

    call defx#custom#option('_', {
            \ 'columns': 'indent:git:icons:filename',
            \ 'show_ignored_files': 1,
            \ })
'''

hook_add = '''
    function! InitDefx()
        "call dein#source('defx.vim')
        :Defx -listed -resume -toggle
    endfunction
    nnoremap <silent><leader>f :call InitDefx()<CR>

    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
        nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> l defx#do_action('open')
        nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ? ':<C-u>wincmd w<CR>' : ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
        nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
        nnoremap <silent><buffer><expr> q defx#do_action('quit')
        nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
        nnoremap <silent><buffer><expr> O defx#do_action('open_tree_recursive')
        nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
        nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
        nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> N defx#do_action('new_file')
        nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
        nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'Time')
        nnoremap <silent><buffer><expr> c defx#do_action('copy')
        nnoremap <silent><buffer><expr> d defx#do_action('remove_trash')
        nnoremap <silent><buffer><expr> m defx#do_action('move')
        nnoremap <silent><buffer><expr> p defx#do_action('paste')
        nnoremap <silent><buffer><expr> r defx#do_action('rename')
        nnoremap <silent><buffer><expr> se defx#do_action('save_session')
        nnoremap <silent><buffer><expr> sl defx#do_action('load_session')
        nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
endfunction
'''



# deoplete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'

hook_add = '''
    echomsg "add deoplete"
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_camel_case = 0
    let g:deoplete#enable_ignore_case = 0
'''
hook_post_source = '''
    echomsg "load deoplete"
    call deoplete#custom#option({
        \ 'auto_complete': v:true,
        \ 'auto_complete_delay': 0,
        \ 'refresh_always': v:true,
        \ 'smart_case': v:true,
        \ 'camel_case': v:true,
        \ 'max_list': 10000,
        \})
    '''

[[plugins]]
repo = 'ncm2/float-preview.nvim.git'
on_source = ['deoplete.nvim']
hook_add = '''
    let g:float_preview#docked = 0
'''

[[plugins]]
repo = 'Omnisharp/omnisharp-vim'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = ['deoplete.nvim']
hook_add = '''
    echomsg "add nvim-lspconfig"
'''
hook_post_source = '''
    echomsg "load nvim-lsp"
    lua require'nvim_lsp'.ccls.setup{}
    lua require'nvim_lsp'.texlab.setup{}
    lua require'nvim_lsp'.omnisharp.setup{}
    lua require'nvim_lsp'.pyls.setup{}
    nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
    nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
    nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
    nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
    nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
    nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
    nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
'''

[[plugins]]
repo = 'Shougo/deoplete-lsp'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_source = ['deoplete.nvim']
depends = 'neosnippet-snippets'
hook_post_source = '''
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
    xmap <C-k>     <Plug>(neosnippet_expand_target)
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#snippets_directory='~/.config/nvim/snippets'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source = ['deoplete.nvim']



# denite
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd =['Denite', 'denite']
hook_add = '''
    nnoremap <silent><leader>p :Denite buffer file/rec buffer<CR>
    nnoremap <silent><leader>b :Denite buffer<CR>
    nnoremap <silent><leader>h :Denite help<CR>
'''
hook_post_source = '''
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
        nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> q denite#do_map('quit')
        nnoremap <silent><buffer><expr> <space> denite#do_map('toggle_select').'j'
    endfunction
    autocmd FileType denite call s:denite_my_settings()
    let s:denite_win_width_percent = 0.5
    let s:denite_win_height_percent = 0.5
    let s:denite_default_options = {
        \ 'split': 'floating',
        \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
        \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent))/2),
        \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
        \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent))/2),
        \ 'highlight_filter_background': 'DeniteFilter',
        \ 'prompt': '$ ',
        \ 'start_filter': v:false,
        \ }
    let s:denite_option_array = []
    for [key, value] in items(s:denite_default_options)
        call add(s:denite_option_array, '-'.key.'='.value)
    endfor
    call denite#custom#option('default', s:denite_default_options)

    call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    call denite#custom#filter('matcher/innore_glabs', 'ignore_globs', ['nerd-fonts/', '.git', '.ropeproject', '__pycache__', 'venv/', 'images/', 'fonts/', 'node_modules'])
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattaern_opts', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts',[])

'''

# tex
#[[plugins]]
#repo = 'lervag/vimtex'
#on_ft = ['tex']
#hook_post_source = '''
#    echom "load vimtex"
#    let g:vimtex_fold_envs = 0
#    let g:vimtex_compiler_latexmk = {
#        \ 'options': [
#        \   '-verbose',
#        \   '-file-line-error',
#        \   '-synctex=1',
#        \   '-interaction=nonstopmode',
#        \   ]}
#    let g:vimtex_copiler_programs = 'nvr'
#'''
#
#


