
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'mhinz/neovim-remote'


[[plugins]]
repo = 'tomasr/molokai'

hook_add = '''
    set background=dark
    au MyAutoCmd VimEnter * nested colorscheme molokai
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'scrooloose/syntastic'

[[plugins]]
repo = 'inkarkat/vim-SyntaxRange'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'tpope/vim-surround'



# lightline
[[plugins]]
repo = 'powerline/powerline-fonts'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
            \ 'colorscheme': 'molokai',
            \ 'mode_map': {'c': 'NORMAL'},
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
            \ },
            \ 'tabline': {
            \   'left': [ [ 'test' , 'tabs' ] ],
            \   'right': [ [ 'close' ] ]
            \ },
            \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
            \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
            \ 'component': {
            \   'test': 'Hello, world'
            \ },
            \ 'component_function': {
            \   'modified': 'LightlineModified',
            \   'readonly': 'LightlineReadonly',
            \   'fugitive': 'LightlineFugitive',
            \   'filename': 'LightlineFilename',
            \   'fileformat': 'LightlineFileformat',
            \   'filetype': 'LightlineFiletype',
            \   'fileencoding': 'LightlineFileencoding',
            \   'mode': 'LightlineMode'
            \ }
            \ }
    
    function! LightlineModified()
      return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction
    
    function! LightlineReadonly()
      return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
    endfunction
    
    function! LightlineFilename()
      return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
            \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
            \  &ft == 'vimshell' ? vimshell#get_status_string() :
            \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
            \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
    endfunction
    
    function! LightlineFugitive()
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        return fugitive#head()
      else
        return ''
      endif
    endfunction
    
    function! LightlineFileformat()
      return winwidth(0) > 70 ? &fileformat : ''
    endfunction
    
    function! LightlineFiletype()
      return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction
    
    function! LightlineFileencoding()
      return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
    endfunction
    
    function! LightlineMode()
      return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction
'''

# defx
[[plugins]]
repo ='kristijanhusak/defx-icons'

[[plugins]]
repo ='kristijanhusak/defx-git'
hook_source= '''
    let g:defx_git#indicators = {
        \ 'Modified'  : '+',
        \ 'Staged'    : '●',
        \ 'Untracked' : '?',
        \ 'Renamed'   : '➜',
        \ 'Unmerged'  : '═',
        \ 'Deleted'   : 'x',
        \ 'Unknown'   : '?'
        \ }
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-icons', 'defx-git']
on_cmd = ['Defx', 'defx']
on_source = ['dein.vim']
hook_source = '''
    function! Root(path) abort
        return fnamemodify(a:path, ':t')
    endfunction

    call defx#custom#source('file', {
            \ 'root': 'Root',
            \})

    call defx#custom#column('filename', {
            \ 'directory_icon': '',
            \ 'opened_icon': '',
            \ })

    call defx#custom#column('mark', {
            \ 'readonly_icon': '✗',
            \ 'selected_icon': '✓',
            \ })

    call defx#custom#option('_', {
            \ 'columns': 'indent:git:icons:filename',
            \ 'show_ignored_files': 1,
            \ })
'''

hook_add = '''
    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
        nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> l defx#do_action('open')
        nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ? ':<C-u>wincmd w<CR>' : ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
        nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
        nnoremap <silent><buffer><expr> q defx#do_action('quit')
        nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
        nnoremap <silent><buffer><expr> O defx#do_action('open_tree_recursive')
        nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
        nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
        nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> N defx#do_action('new_file')
        nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
        nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'Time')
        nnoremap <silent><buffer><expr> c defx#do_action('copy')
        nnoremap <silent><buffer><expr> d defx#do_action('remove_trash')
        nnoremap <silent><buffer><expr> m defx#do_action('move')
        nnoremap <silent><buffer><expr> p defx#do_action('paste')
        nnoremap <silent><buffer><expr> r defx#do_action('rename')
        nnoremap <silent><buffer><expr> se defx#do_action('save_session')
        nnoremap <silent><buffer><expr> sl defx#do_action('load_session')
        nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
endfunction
'''



# deoplete
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'

hook_add = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_camel_case = 0
    let g:deoplete#enable_ignore_case = 0
"    let g:deoplete#enable_refresh_always = 0
"    let g:deoplete#file#enable_buffer_path = 1
    call deoplete#custom#option({
        \ 'auto_complete': v:true,
        \ 'auto_complete_delay': 0,
        \ 'smart_case': v:true,
        \ 'camel_case': v:true,
        \ 'max_list': 10000,
        \})
    '''

[[plugins]]
repo = 'ncm2/float-preview.nvim.git'

[[plugins]]
repo = 'neovim/nvim-lsp'

[[plugins]]
repo = 'Shougo/deoplete-lsp'

# denite
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
        nnoremap <silent><buffer><expr> d denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> q denite#do_map('quit')
        nnoremap <silent><buffer><expr> <space> denite#do_map('toggle_select').'j'
    endfunction
    autocmd FileType denite call s:denite_my_settings()
    let s:denite_win_width_percent = 0.5
    let s:denite_win_height_percent = 0.35
    let s:denite_default_options = {
        \ 'split': 'floating',
        \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
        \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent))/2),
        \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
        \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent))/2),
        \ 'highlight_filter_background': 'DeniteFilter',
        \ 'prompt': '$ ',
        \ 'start_filter': v:false,
        \ }
    let s:denite_option_array = []
    for [key, value] in items(s:denite_default_options)
        call add(s:denite_option_array, '-'.key.'='.value)
    endfor
    call denite#custom#option('default', s:denite_default_options)

    call denite#custom#var('file/rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    call denite#custom#filter('matcher/innore_glabs', 'ignore_globs', ['nerd-fonts/', '.git', '.ropeproject', '__pycache__', 'venv/', 'images/', 'fonts/', 'node_modules'])
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattaern_opts', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts',[])

'''

# neoterm
[[plugins]]
repo = 'kassio/neoterm'

# neosnippet
#[[plugins]]
#repo = 'Shougo/neosnippet-snippets'
#
#[[plugins]]
#repo = 'Shougo/neosnippet.vim'
#hook_add = '''
#    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
#    smap <C-k>     <Plug>(neosnippet_expand_or_jump)
#    xmap <C-k>     <Plug>(neosnippet_expand_target)
#
#    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
#    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
#
#    if has('conceal')
#        set conceallevel=2 concealcursor=niv
#    endif
#'''
#


