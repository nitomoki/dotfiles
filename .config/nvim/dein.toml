
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'mhinz/neovim-remote'


[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'scrooloose/syntastic'

[[plugins]]
repo = 'inkarkat/vim-SyntaxRange'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nnoremap <leader>gc :Gcommit<CR>
    nnoremap <leader>ga :Gwrite<CR>
    nnoremap <leader>gp :Git push<CR>
'''

# lightline
[[plugins]]
repo = 'powerline/powerline-fonts'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
            \ 'colorscheme': 'molokai',
            \ 'mode_map': {'c': 'NORMAL'},
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
            \ },
            \ 'tabline': {
            \   'left': [ [ 'date' , 'tabs' ] ],
            \   'right': [ [ 'close' ] ]
            \ },
            \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
            \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
            \ 'component': {
            \   'test': 'Hello, world'
            \ },
            \ 'component_function': {
            \   'modified': 'LightlineModified',
            \   'readonly': 'LightlineReadonly',
            \   'fugitive': 'LightlineFugitive',
            \   'filename': 'LightlineFilename',
            \   'fileformat': 'LightlineFileformat',
            \   'filetype': 'LightlineFiletype',
            \   'fileencoding': 'LightlineFileencoding',
            \   'mode': 'LightlineMode',
            \   'date': 'LightlineDate',
            \ }
            \ }
    
    function! LightlineModified()
      return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction
    
    function! LightlineReadonly()
      return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
    endfunction
    
    function! LightlineFilename()
      return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
            \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
            \  &ft == 'vimshell' ? vimshell#get_status_string() :
            \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
            \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
    endfunction
    
    function! LightlineFugitive()
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        return fugitive#head()
      else
        return ''
      endif
    endfunction
    
    function! LightlineFileformat()
      return winwidth(0) > 70 ? &fileformat : ''
    endfunction
    
    function! LightlineFiletype()
      return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction
    
    function! LightlineFileencoding()
      return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
    endfunction
    
    function! LightlineMode()
      return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction

    function! LightlineDate()
        return strftime("%Y/%m/%d")
    endfunction

    let s:counter = {"count": 0}



    
'''


# terminal
[[plugins]]
repo = 'kassio/neoterm'

# quickrun
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = {
    \
    \   '_': {
    \       'outputter': 'message'
    \   },
    \   'tex': {
    \       'command': 'latexmk',
    \       'outputter': 'error',
    \       'outputter/error/success': 'null',
    \       'outputter/error/error': 'buffer',
    \       'outputter/buffer/split': '""',
    \       'exec': ['%c -gg -pdfdvi %s', '%c -c %s', 'xdg-open %s:r.pdf'],
    \       'hook/sweep/files': [
    \                      '%S:p:r.aux',
    \                      '%S:p:r.bbl',
    \                      '%S:p:r.blg',
    \                      '%S:p:r.dvi',
    \                      '%S:p:r.fdb_latexmk',
    \                      '%S:p:r.fls',
    \                      '%S:p:r.log',
    \                      '%S:p:r.out'
    \                      ],
    \   },
    \   'cs': {
    \       'command': 'mcs',
    \       'cmdopt': '-pkg:dotnet'
    \   },
    \}
'''









